name: Deployment Of A Release Tag

on:
    push:
        tags: ["v*.*.*"] # Run only on release of a properly named tag.

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    deploy_release_tag:
        runs-on: ubuntu-latest

        permissions:
            contents: read
            packages: write
            id-token: write
            attestations: write

        steps:
            - name: Validate tag's name format
              run: |
                TAG="${{ github.ref_name }}"
                if [[ ! "$TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
                    echo "Error: Tag '$TAG' does not match required format 'v*.*.*' where '*' must be non-negative integers"
                    echo "Examples of valid tags: v1.0.0, v2.3.1, v10.15.4 etc."
                    exit 1
                fi

            - name: Checkout repository
              uses: actions/checkout@v5

            - name: Lint Dockerfile
              uses: hadolint/hadolint-action@v3.2.0
              with:
                dockerfile: Dockerfile

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                registry: ${{ env.REGISTRY }}
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                tags: |
                    # Semantic versioning tags
                    type=semver,pattern={{version}}
                    type=semver,pattern={{major}}.{{minor}}
                    type=semver,pattern={{major}}

            - name: Build and push Docker image
              id: build
              uses: docker/build-push-action@v6
              with:
                context: .
                platforms: linux/amd64
                push: true
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}
                cache-from: type=gha
                cache-to: type=gha,mode=max

            - name: Generate artifact attestation
              uses: actions/attest-build-provenance@v3
              with:
                subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                subject-digest: ${{ steps.build.outputs.digest }}
                push-to-registry: true
